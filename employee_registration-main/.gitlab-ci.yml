stages:
  - build
  - test
  - deploy



# variables:
#       GIT_CLONE_PATH: /builds/$CI_PROJECT_NAME
    #  $CI_BUILDS_DIR:"/home/gitlab-runner/builds/jCrdPYR2/0/fineshift/employee_registration/target"
    #  $CI_PROJECT_NAME:"Employee_registration"
    #  $CI_PIPELINE_ID:"496a873b"

default:
  tags:
    - Docker-test
    
include:
  # - template: Jobs/SAST.gitlab-ci.yml
  - local: SAST.gitlab-ci.yml
  - template: Code-Quality.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml
  #- template: Jobs/Dependency-Scanning.gitlab-ci.yml
  #- template: Security/License-Scanning.gitlab-ci.yml
 # - template: Security/DAST.gitlab-ci.yml


code_quality:
  stage: test
  tags:
    - Docker-test
  artifacts:
    name: codequality
    paths: [gl-code-quality-report.json] 
    reports:
      codequality: gl-code-quality-report.json
    expire_in: never 


build-code:
  stage: build
  image: maven
  # only:
  # - main
  tags:
  - test-demo
  # before_script:
  # - echo "=======change permission ======="
  # - chmod +x maveninstall.sh
  parallel: 2
  script:
  - echo "==== Project Building Started ====="
  # - "./maveninstall.sh"
  - mvn clean install
  - echo "code build Successfull..."
  - pwd
  - ls
  when: on_success
  artifacts:
    paths:
    - target/*.war
    expire_in: 15 days

sast:
  stage: test
  # tags:
  #   - Docker-test
  # before_script:
  #   - ls
  #   - pwd
  #   - cd /home/pravin/demo/employee_registration  
  artifacts:
   name: sast
   paths:
     - gl-sast-report.json
   reports:
     sast: gl-sast-report.json
   when: always
  script:
    - echo "testing the SAST job"


deploy:
  stage: deploy
  tags:
  - test-demo
  environment: Production
    # - portalshell
  script:
#    - cp path/to/your/war/file.war /path/to/tomcat/webapps/
    - cp -r target/*.war /opt/tomcat/webapps
#     - /path/to/tomcat/bin/startup.sh
 #   - /home/fs-ankita/apache-tomcat-9.0.78/bin









  
 # 
